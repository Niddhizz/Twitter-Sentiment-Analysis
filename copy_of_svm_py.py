# -*- coding: utf-8 -*-
"""Copy of svm.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xXgvYuiISFxqCpVI8Ys2qx53oQRJNBNN
"""

import io

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
data = pd.read_csv('Twitter_Data.csv')

data.head()

data.shape

data.category.unique()

data.isna().sum()

data[data['category'].isna()]

data[data['clean_text'].isna()]

data.drop(data[data['clean_text'].isna()].index, inplace=True)
data.drop(data[data['category'].isna()].index, inplace=True)

sentiment_map={-1:'negative',1:'positive',0:'neutral'}
data.insert(2,'sentiment',[sentiment_map[s] for s in data.category],True)
#data['sentiment_int']=[sentiment_map[s] for s in data.sentiment]

data.head()

#labeling
reviews = np.array(data['clean_text'])[:]
labels = np.array(data['sentiment'])[:]

from collections import Counter

Counter(labels)

from sklearn.feature_extraction.text import CountVectorizer
from nltk.tokenize import RegexpTokenizer
import csv


def preProcessor(Tweet):
    import re
    from string import punctuation
    text=re.sub(r'(http|ftp|https):\/\/([\w\-_]+(?:(?:\.[\w\-_]+)+))([\w\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?', ' ', Tweet)
    text=re.sub(r'['+punctuation+']',' ',Tweet)
    text=re.sub(r'#(\w+)',' ',Tweet)
    text=re.sub(r'@(\w+)',' ',Tweet)
    #print(token.tokenize(text))
    return Tweet

token=RegexpTokenizer(r'\w+')
cv=CountVectorizer(lowercase=True,preprocessor=preProcessor,stop_words='english',ngram_range=(1,1),tokenizer=token.tokenize)
#text_counts=cv.fit_transform(data['Tweet'])
text_counts=cv.fit_transform(data['clean_text'].values.astype('U'))

from sklearn.model_selection import train_test_split
# x_train, x_test, y_train, y_test = train_test_split(text_counts,data['sentiment'],test_size=0.3)
x_train, x_test, y_train, y_test = train_test_split(text_counts,data['sentiment'],test_size=0.3)

from sklearn import metrics

from sklearn import svm
clf = svm.LinearSVC()
clf.fit(x_train,y_train)
pred=clf.predict(x_test)
metrics.accuracy_score(y_test, pred)

import pickle

pickle.dump(clf,open('/content/model_saved','wb'))

model_loaded=pickle.load(open('/content/model_saved','rb'))

pickle.dump(clf,open('svmclassifier.pkl','wb'))

model_saved=pickle.load(open('svmclassifier.pkl','rb'))



